@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using AgentMarketer.Web.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ChatOrchestrationService ChatService
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Home> Logger
@implements IAsyncDisposable

<PageTitle>Agent Marketer</PageTitle>

<div class="chat-container">
    <div class="chat-header">
        <h1>
            <i class="fas fa-robot"></i>
            Agent Marketer
        </h1>
        <p class="text-muted">Describe your marketing campaign goals and let our AI agents help you create and execute it.</p>
        @if (!string.IsNullOrEmpty(_sessionId))
        {
            <small class="text-light">Session: @_sessionId.Substring(0, 8)...</small>
        }
    </div>

    <div class="chat-messages" @ref="messagesContainer">
        @if (messages.Count == 0)
        {
            <div class="welcome-message">
                <div class="agent-message">
                    <div class="message-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="message-content">
                        <strong>Agent Marketer</strong>
                        <p>Hello! I'm here to help you create and execute marketing campaigns. 
                           Tell me about your campaign goals, target audience, or what you'd like to achieve.</p>
                        <div class="example-prompts">
                            <button class="btn btn-outline-primary btn-sm" @onclick='() => SendExample("Create a marketing campaign to increase awareness for our new SaaS product targeting small businesses")'>
                                SaaS Product Launch
                            </button>
                            <button class="btn btn-outline-primary btn-sm" @onclick='() => SendExample("Help me create email campaigns for our Q1 product announcement to tech companies")'>
                                Email Campaign
                            </button>
                            <button class="btn btn-outline-primary btn-sm" @onclick='() => SendExample("I need a comprehensive marketing strategy for a B2B software company targeting enterprises")'>
                                B2B Strategy
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @foreach (var message in messages)
        {
            <div class="@(message.IsUser ? "user-message" : "agent-message")">
                <div class="message-avatar">
                    @if (message.IsUser)
                    {
                        <i class="fas fa-user"></i>
                    }
                    else
                    {
                        <i class="fas fa-robot"></i>
                    }
                </div>
                <div class="message-content">
                    @if (!message.IsUser)
                    {
                        <strong>@message.AgentName</strong>
                    }
                    <div class="message-text">
                        @((MarkupString)FormatMessage(message.Content))
                    </div>
                    @if (message.Timestamp.HasValue)
                    {
                        <small class="text-muted">@message.Timestamp.Value.ToString("HH:mm")</small>
                    }
                    
                    @* Render embedded components based on message type *@
                    @if (message.Component != null)
                    {
                        <div class="message-component">
                            @message.Component
                        </div>
                    }
                </div>
            </div>
        }

        @if (isTyping)
        {
            <div class="agent-message typing">
                <div class="message-avatar">
                    <i class="fas fa-robot"></i>
                </div>
                <div class="message-content">
                    <div class="typing-indicator">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="chat-input">
        <div class="input-group">
            <input type="text" class="form-control" @bind="currentMessage" @onkeypress="HandleKeyPress" 
                   placeholder="Describe your marketing campaign goals..." disabled="@isProcessing" />
            <button class="btn btn-primary" @onclick="SendMessage" disabled="@(isProcessing || string.IsNullOrWhiteSpace(currentMessage))">
                @if (isProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                }
                else
                {
                    <i class="fas fa-paper-plane"></i>
                }
            </button>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new();
    private string currentMessage = "";
    private bool isProcessing = false;
    private bool isTyping = false;
    private ElementReference messagesContainer;
    private HubConnection? hubConnection;
    private string _sessionId = Guid.NewGuid().ToString();
    private object? _pendingApprovalData;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize the chat service
            var httpClient = HttpClientFactory.CreateClient("AgentMarketerAPI");
            await ChatService.InitializeAsync(httpClient.BaseAddress?.ToString() ?? "https://localhost:7282");

            // Set up event handlers
            ChatService.OnAgentMessage += HandleAgentMessage;
            ChatService.OnProgressUpdate += HandleProgressUpdate;
            ChatService.OnApprovalRequired += HandleApprovalRequired;

            // Initialize SignalR connection
            await InitializeSignalR();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize chat interface");
            AddSystemMessage("Failed to connect to the agent system. Please refresh the page to try again.");
        }
    }

    private async Task InitializeSignalR()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("AgentMarketerAPI");
            var baseUrl = httpClient.BaseAddress?.ToString().TrimEnd('/') ?? "https://localhost:7282";
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{baseUrl}/chathub")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string, string>("AgentMessage", async (agentName, message) =>
            {
                await InvokeAsync(() =>
                {
                    AddAgentMessage(agentName, message);
                    StateHasChanged();
                });
                await ScrollToBottom();
            });

            hubConnection.On<string, int>("ProgressUpdate", async (task, progress) =>
            {
                await InvokeAsync(() =>
                {
                    var progressComponent = CreateProgressComponent(task, progress);
                    AddAgentMessageWithComponent("System", $"Progress Update", progressComponent);
                    StateHasChanged();
                });
                await ScrollToBottom();
            });

            await hubConnection.StartAsync();
            
            // Join the session group
            await hubConnection.InvokeAsync("JoinCampaignGroup", $"session:{_sessionId}");
            
            Logger.LogInformation("SignalR connection established");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to establish SignalR connection");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(currentMessage))
        {
            await SendMessage();
        }
    }

    private async Task SendExample(string exampleText)
    {
        currentMessage = exampleText;
        await SendMessage();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isProcessing)
            return;

        var userMessage = currentMessage;
        currentMessage = "";
        isProcessing = true;

        // Add user message
        AddUserMessage(userMessage);
        await ScrollToBottom();

        try
        {
            // Show typing indicator
            isTyping = true;
            StateHasChanged();
            await ScrollToBottom();

            // Send message to the chat service
            var response = await ChatService.ProcessUserMessageAsync(userMessage, _sessionId);
            
            // Handle the response
            await HandleChatResponse(response);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing user message: {Message}", userMessage);
            AddSystemMessage($"Sorry, I encountered an error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            isTyping = false;
            StateHasChanged();
        }
    }

    private async Task HandleChatResponse(ChatResponse response)
    {
        AddAgentMessage(response.AgentName, response.Message);

        if (response.RequiresApproval && response.Data != null)
        {
            _pendingApprovalData = response.Data;
            var approvalComponent = CreateApprovalComponent(response.Data);
            AddAgentMessageWithComponent(response.AgentName, 
                "Please review the campaign plan below:", 
                approvalComponent);
        }

        await ScrollToBottom();
    }

    private async Task HandleAgentMessage(string agentName, string message)
    {
        await InvokeAsync(() =>
        {
            AddAgentMessage(agentName, message);
            StateHasChanged();
        });
        await ScrollToBottom();
    }

    private async Task HandleProgressUpdate(string task, int progress)
    {
        await InvokeAsync(() =>
        {
            var progressComponent = CreateProgressComponent(task, progress);
            AddAgentMessageWithComponent("System", "Progress Update", progressComponent);
            StateHasChanged();
        });
        await ScrollToBottom();
    }

    private async Task HandleApprovalRequired(object approval)
    {
        await InvokeAsync(() =>
        {
            var approvalComponent = CreateApprovalComponent(approval);
            AddAgentMessageWithComponent("Planner Agent", 
                "I need your approval to proceed:", 
                approvalComponent);
            StateHasChanged();
        });
        await ScrollToBottom();
    }

    private void AddUserMessage(string content)
    {
        messages.Add(new ChatMessage
        {
            Content = content,
            IsUser = true,
            Timestamp = DateTime.Now
        });
        StateHasChanged();
    }

    private void AddAgentMessage(string agentName, string content)
    {
        messages.Add(new ChatMessage
        {
            Content = content,
            IsUser = false,
            AgentName = agentName,
            Timestamp = DateTime.Now
        });
        StateHasChanged();
    }

    private void AddSystemMessage(string content)
    {
        messages.Add(new ChatMessage
        {
            Content = content,
            IsUser = false,
            AgentName = "System",
            Timestamp = DateTime.Now
        });
        StateHasChanged();
    }

    private void AddAgentMessageWithComponent(string agentName, string content, RenderFragment component)
    {
        messages.Add(new ChatMessage
        {
            Content = content,
            IsUser = false,
            AgentName = agentName,
            Timestamp = DateTime.Now,
            Component = component
        });
        StateHasChanged();
    }

    private string FormatMessage(string message)
    {
        // Convert line breaks to HTML
        return message.Replace("\n", "<br/>").Replace("•", "&bull;");
    }

    private RenderFragment CreateProgressComponent(string task, int progress)
    {
        return @<div class="progress-component">
            <div class="d-flex justify-content-between mb-2">
                <span class="small">@task</span>
                <span class="small">@progress%</span>
            </div>
            <div class="progress">
                <div class="progress-bar bg-primary" style="width: @(progress)%"></div>
            </div>
        </div>;
    }

    private RenderFragment CreateApprovalComponent(object data)
    {
        // Extract campaign summary from the data object
        var summary = ExtractCampaignSummary(data);
        
        return @<div class="approval-component">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Campaign Plan Summary</h5>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-3">Target Companies:</dt>
                        <dd class="col-sm-9">@summary.TargetCompanies companies identified</dd>
                        
                        <dt class="col-sm-3">Campaign Components:</dt>
                        <dd class="col-sm-9">@string.Join(", ", summary.Components)</dd>
                        
                        <dt class="col-sm-3">Timeline:</dt>
                        <dd class="col-sm-9">@summary.Timeline</dd>
                        
                        <dt class="col-sm-3">Est. Budget:</dt>
                        <dd class="col-sm-9">@summary.EstimatedBudget</dd>
                    </dl>
                    
                    <div class="mt-3">
                        <button class="btn btn-success me-2" @onclick="() => HandleApproval(true)">
                            <i class="fas fa-check"></i> Approve & Start
                        </button>
                        <button class="btn btn-outline-secondary me-2" @onclick="() => HandleApproval(false)">
                            <i class="fas fa-edit"></i> Request Changes
                        </button>
                        <button class="btn btn-outline-danger" @onclick="() => HandleApproval(null)">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>;
    }

    private (int TargetCompanies, string[] Components, string Timeline, string EstimatedBudget) ExtractCampaignSummary(object data)
    {
        // Default values
        var targetCompanies = 12;
        var components = new[] { "Landing Pages", "Email Campaigns", "Social Media" };
        var timeline = "2-3 weeks";
        var budget = "$15,000 - $25,000";

        try
        {
            // Try to extract from JSON if it's a JsonElement
            if (data is System.Text.Json.JsonElement jsonElement)
            {
                if (jsonElement.TryGetProperty("CampaignSummary", out var summary))
                {
                    if (summary.TryGetProperty("TargetCompanies", out var targetCompaniesElement))
                        targetCompanies = targetCompaniesElement.GetInt32();
                    
                    if (summary.TryGetProperty("Components", out var componentsElement) && componentsElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                    {
                        var componentList = new List<string>();
                        foreach (var component in componentsElement.EnumerateArray())
                        {
                            componentList.Add(component.GetString() ?? "");
                        }
                        components = componentList.ToArray();
                    }
                    
                    if (summary.TryGetProperty("Timeline", out var timelineElement))
                        timeline = timelineElement.GetString() ?? timeline;
                    
                    if (summary.TryGetProperty("EstimatedBudget", out var budgetElement))
                        budget = budgetElement.GetString() ?? budget;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to extract campaign summary from data");
        }

        return (targetCompanies, components, timeline, budget);
    }

    private async Task HandleApproval(bool? approved)
    {
        try
        {
            if (approved == true)
            {
                // Send approval to the backend
                // For now, just show a message
                AddAgentMessage("Router Agent", "Great! I'm starting the campaign execution. I'll keep you updated on the progress.");
                
                // Simulate starting execution
                await Task.Delay(1000);
                
                var executionComponent = CreateProgressComponent("Generating company-specific content...", 25);
                AddAgentMessageWithComponent("Content Generator", 
                    "Starting content generation for each target company:", 
                    executionComponent);
            }
            else if (approved == false)
            {
                AddAgentMessage("Planner Agent", "I understand you'd like some changes. Could you tell me what aspects of the plan you'd like me to modify?");
            }
            else
            {
                AddAgentMessage("System", "Campaign planning cancelled. Feel free to start over with new requirements anytime.");
            }

            _pendingApprovalData = null;
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling approval");
            AddSystemMessage("Sorry, there was an error processing your approval. Please try again.");
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(50); // Small delay to ensure DOM is updated
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
        }
        catch (Exception ex)
        {
            // Ignore JS interop errors
            Logger.LogDebug(ex, "Failed to scroll to bottom");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        
        if (ChatService != null)
        {
            ChatService.OnAgentMessage -= HandleAgentMessage;
            ChatService.OnProgressUpdate -= HandleProgressUpdate;
            ChatService.OnApprovalRequired -= HandleApprovalRequired;
            await ChatService.DisposeAsync();
        }
    }

    private class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
        public string AgentName { get; set; } = "";
        public DateTime? Timestamp { get; set; }
        public RenderFragment? Component { get; set; }
    }
}
